Traceback (most recent call last):
  File "/opt/jupyterhub/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/jupyterhub/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/jupyterhub/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/jupyterhub/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/jupyterhub/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/jupyterhub/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Constants
g = 9.81 * 1000  # gravitational acceleration in mm/s^2

# Sample data for Delta h_i and Q_i 
delta_h_mitre = np.array([476-440, 514-426, 528-400, 530-375, 526-365]) #* 304.8  # delta h_i values for mitre in mm (1-2)
delta_h_elbow = np.array([426-408, 386-336, 332-258, 295-210, 284-192]) #* 304.8 # delta h_i values for elbow in mm (3-4)
delta_h_bend = np.array([390-378, 290-260, 190-145, 130-78, 110-52]) #* 304.8 # delta h_i values for bend in mm (9-10)

Q = np.array([223.91, 360.26, 450.07, 468.65, 491.51]) * 1000  # Q_i values converted from mL/s to mmÂ³/s
#Q = np.array([0.00583, 0.0111, 0.0154, 0.0169, 0.0181]) * 28316831.998815 # Q_i values converted from cfs to mm3/s
d = 22  # Diameter in mm

# Compute the x values for the plot using the equation
x_values = (8 * Q**2) / (np.pi**2 * g * d**4)

# Reshape for linear regression (required shape for sklearn)
x_values = x_values.reshape(-1, 1)

# A function to do the job
def slope_mitre_elbow_bend(delta_h_mitre, delta_h_elbow, delta_h_bend, x_values):
    # Prepare a list to hold the K values and predictions for plotting
    K_values = []
    delta_h_preds = []

    # Fit linear regression for each delta_h dataset
    for delta_h in [delta_h_mitre, delta_h_elbow, delta_h_bend]:
        delta_h = delta_h.reshape(-1, 1)  # Reshape for regression
        model = LinearRegression()
        model.fit(x_values, delta_h)  # Fit the model
        K = model.coef_[0][0]  # Get the slope (K)
        K_values.append(K)  # Store the slope
        delta_h_pred = model.predict(x_values)  # Make predictions
        delta_h_preds.append(delta_h_pred)  # Store predictions
    
    # Plotting
    plt.scatter(x_values, delta_h_mitre, color='blue', label='Mitre Data Points')
    plt.plot(x_values, delta_h_preds[0], color='red', label=f'Mitre Fit: $K={K_values[0]:.2f}$\n')
    
    plt.scatter(x_values, delta_h_elbow, color='green', label='Elbow Data Points')
    plt.plot(x_values, delta_h_preds[1], color='orange', label=f'Elbow Fit: $K={K_values[1]:.2f}$\n')
    
    plt.scatter(x_values, delta_h_bend, color='purple', label='Bend Data Points')
    plt.plot(x_values, delta_h_preds[2], color='magenta', label=f'Bend Fit: $K={K_values[2]:.2f}$')
    
    # Set labels and title
    plt.xlabel(r'$\frac{V_i^2}{2g} = \frac{8Q^2}{\pi^2 g d^4}$ (mm)')
    plt.ylabel(r'$\Delta h_i$ (mm)')
    plt.title('Linear Fit of $\\Delta h_i$ vs $\\frac{8Q_i^2}{\\pi^2 g d^4}$ for Different Types')
    plt.legend(frameon=True, fancybox=True, shadow=True)
    plt.grid(True, which="both", linestyle=':', linewidth=0.7)
    plt.tight_layout()
    plt.show()
    
    # Print the slopes K for each
    for i, label in enumerate(['Mitre', 'Elbow', 'Bend']):
        print(f"Slope K for {label}: {K_values[i]:.4f}")

# Run the program
slope_mitre_elbow_bend(delta_h_mitre, delta_h_elbow, delta_h_bend, x_values)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[2], line 3[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[0;32m----> 3[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mlinear_model[39;00m [38;5;28;01mimport[39;00m LinearRegression
[1;32m      5[0m [38;5;66;03m# Constants[39;00m
[1;32m      6[0m g [38;5;241m=[39m [38;5;241m9.81[39m [38;5;241m*[39m [38;5;241m1000[39m  [38;5;66;03m# gravitational acceleration in mm/s^2[39;00m

[0;31mModuleNotFoundError[0m: No module named 'sklearn'

